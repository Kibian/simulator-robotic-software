(program (declaration #include < (h_file Servo . h) >) (definition (constant const (var_type int) (assignment inR1 = (expression 2)) ;)) (definition (constant const (var_type int) (assignment inR2 = (expression 3)) ;)) (definition (constant const (var_type int) (assignment enableR = (expression 9)) ;)) (definition (constant const (var_type int) (assignment inL1 = (expression 4)) ;)) (definition (constant const (var_type int) (assignment inL2 = (expression 5)) ;)) (definition (constant const (var_type int) (assignment enableL = (expression 10)) ;)) (definition (assignment_definition (var_type double) (assignment numPrueba = (expression 69.20201))) ;) (definition (assignment_definition (var_type bool) (assignment tfPrueba = (expression false))) ;) (definition (assignment_definition (var_type bool) (assignment tprueba = (expression true))) ;) (definition (constant const (var_type int) (assignment PhotoSensorLeft = (expression 6)) ;)) (definition (constant const (var_type int) (assignment PhotoSensorRight = (expression 7)) ;)) (definition (constant const (var_type int) (assignment BLANCO = (expression 0)) ;)) (definition (constant const (var_type int) (assignment NEGRO = (expression 1)) ;)) (setup void setup ( ) (code_block { (sentence (function_call pinMode ( (parameter (expression inR1) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression inR2) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression enableR) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression inL1) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression inL2) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression enableL) , (expression OUTPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression PhotoSensorLeft) , (expression INPUT)) )) ;) (sentence (function_call pinMode ( (parameter (expression PhotoSensorRight) , (expression INPUT)) )) ;) })) (loop void loop ( ) (code_block { (sentence (conditional_sentence if ( (expression (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorLeft)) ))) == (expression NEGRO)) && (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorRight)) ))) == (expression NEGRO))) ) (code_block { (sentence (function_call avanzarVel ( (parameter (expression 160)) )) ;) }) else (conditional_sentence if ( (expression (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorLeft)) ))) == (expression BLANCO)) && (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorRight)) ))) == (expression BLANCO))) ) (code_block { (sentence (function_call derechaVel ( (parameter (expression 200)) )) ;) }) else (conditional_sentence if ( (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorLeft)) ))) == (expression BLANCO)) ) (code_block { (sentence (function_call derechaVel ( (parameter (expression 150)) )) ;) }) else (conditional_sentence if ( (expression (expression (function_call digitalRead ( (parameter (expression PhotoSensorRight)) ))) == (expression BLANCO)) ) (code_block { (sentence (function_call izquierdaVel ( (parameter (expression 150)) )) ;) })))))) })) (function (var_type void) avanzar ( ) (code_block { (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableR) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableL) , (expression HIGH)) )) ;) })) (function (var_type void) retroceder ( ) (code_block { (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableR) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableL) , (expression HIGH)) )) ;) })) (function (var_type void) parar ( ) (code_block { (sentence (function_call digitalWrite ( (parameter (expression enableR) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableL) , (expression LOW)) )) ;) })) (function (var_type void) izquierda ( ) (code_block { (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableR) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableL) , (expression HIGH)) )) ;) })) (function (var_type void) derecha ( ) (code_block { (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableR) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression enableL) , (expression HIGH)) )) ;) })) (function (var_type void) avanzarVel ( (function_args (simple_definition (var_type int) vel)) ) (code_block { (sentence (conditional_sentence if ( (expression (expression vel) > (expression 255)) ) (code_block (sentence (assignment vel = (expression 255)) ;)))) (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression LOW)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableR) , (expression vel)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression LOW)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableL) , (expression vel)) )) ;) })) (function (var_type void) retrocederVel ( (function_args (simple_definition (var_type int) vel)) ) (code_block { (sentence (conditional_sentence if ( (expression (expression vel) > (expression 255)) ) (code_block (sentence (assignment vel = (expression 255)) ;)))) (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression HIGH)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableR) , (expression vel)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression HIGH)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableL) , (expression vel)) )) ;) })) (function (var_type void) izquierdaVel ( (function_args (simple_definition (var_type int) vel)) ) (code_block { (sentence (conditional_sentence if ( (expression (expression vel) > (expression 255)) ) (code_block (sentence (assignment vel = (expression 255)) ;)))) (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression LOW)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableR) , (expression vel)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression HIGH)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableL) , (expression vel)) )) ;) })) (function (var_type void) derechaVel ( (function_args (simple_definition (var_type int) vel)) ) (code_block { (sentence (conditional_sentence if ( (expression (expression vel) > (expression 255)) ) (code_block (sentence (assignment vel = (expression 255)) ;)))) (sentence (function_call digitalWrite ( (parameter (expression inR1) , (expression LOW)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inR2) , (expression HIGH)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableR) , (expression vel)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL1) , (expression HIGH)) )) ;) (sentence (function_call digitalWrite ( (parameter (expression inL2) , (expression LOW)) )) ;) (sentence (function_call analogWrite ( (parameter (expression enableL) , (expression vel)) )) ;) })))
